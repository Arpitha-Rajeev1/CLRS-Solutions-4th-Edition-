Consider the searching problem: Input: A sequence of n numbers <a1, a2, ... an> stored in array A[1:n] and a value x.
Output: An index i such that x equals A[i] or the special value NIL if x does not appear in A.
Write pseudocode for linear search, which scans through the array from beginning to end, looking for x. Using a loop invariant, prove that your algorithm is correct. Make sure that your loop 
invariant fulfills the three necessary properties.

def LINEAR_SEARCH(A, n, x):
    for i in range(1, n+1):  # Loop from index 1 to n
        if A[i] == x:
            return i  # Return the index if x is found
    return NIL  # Return NIL if x is not found

1. Initialization (Before the first iteration)
Before the loop starts, i = 1.
The subarray A[1:0] (an empty array) has been searched, and obviously, x is not there.
The loop invariant holds at initialization.

2. Maintenance (Preserving the Invariant)
Suppose before iteration i, we have searched A[1:i-1], and x was not found.
In iteration i, we check A[i].
If A[i] == x, we return i, which is correct.
Otherwise, we continue to the next iteration (i+1).
Since we add one new element to the searched portion and x was not found in earlier iterations, the invariant remains true.

3. Termination (When the loop ends)
The loop terminates when i = n+1, meaning we have searched the entire array.
If x was found, we have already returned i.
If we reach the end and x was never found, we return NIL, correctly indicating that x is not in A.
